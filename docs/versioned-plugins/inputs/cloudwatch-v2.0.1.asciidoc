:plugin: cloudwatch
:type: input

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: v2.0.1
:release_date: 2017-06-23
:changelog_url: https://github.com/logstash-plugins/logstash-input-cloudwatch/blob/v2.0.1/CHANGELOG.md
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="{version}-plugins-{type}s-{plugin}"]

=== Cloudwatch input plugin {version}

include::{include_path}/plugin_header.asciidoc[]

==== Description

Pull events from the Amazon Web Services CloudWatch API.

To use this plugin, you *must* have an AWS account, and the following policy

Typically, you should setup an IAM policy, create a user and apply the IAM policy to the user.
A sample policy for EC2 metrics is as follows:
[source,json]
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Sid": "Stmt1444715676000",
                "Effect": "Allow",
                "Action": [
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:ListMetrics"
                ],
                "Resource": "*"
            },
            {
                "Sid": "Stmt1444716576170",
                "Effect": "Allow",
                "Action": [
                    "ec2:DescribeInstances"
                ],
                "Resource": "*"
            }
        ]
    }

See http://aws.amazon.com/iam/ for more details on setting up AWS identities.

# Configuration Example
[source, ruby]
    input {
      cloudwatch {
        namespace => "AWS/EC2"
        metrics => [ "CPUUtilization" ]
        filters => { "tag:Group" => "API-Production" }
        region => "us-east-1"
      }
    }

    input {
      cloudwatch {
        namespace => "AWS/EBS"
        metrics => ["VolumeQueueLength"]
        filters => { "tag:Monitoring" => "Yes" }
        region => "us-east-1"
      }
    }

    input {
      cloudwatch {
        namespace => "AWS/RDS"
        metrics => ["CPUUtilization", "CPUCreditUsage"]
        filters => { "EngineName" => "mysql" } # Only supports EngineName, DatabaseClass and DBInstanceIdentifier
        region => "us-east-1"
      }
    }


[id="{version}-plugins-{type}s-{plugin}-options"]
==== Cloudwatch Input Configuration Options

This plugin supports the following configuration options plus the <<{version}-plugins-{type}s-{plugin}-common-options>> described later.

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<{version}-plugins-{type}s-{plugin}-access_key_id>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
| <<{version}-plugins-{type}s-{plugin}-aws_credentials_file>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
| <<{version}-plugins-{type}s-{plugin}-combined>> |{logstash-ref}/configuration-file-structure.html#boolean[boolean]|No
| <<{version}-plugins-{type}s-{plugin}-filters>> |{logstash-ref}/configuration-file-structure.html#array[array]|Yes
| <<{version}-plugins-{type}s-{plugin}-interval>> |{logstash-ref}/configuration-file-structure.html#number[number]|No
| <<{version}-plugins-{type}s-{plugin}-metrics>> |{logstash-ref}/configuration-file-structure.html#array[array]|No
| <<{version}-plugins-{type}s-{plugin}-namespace>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
| <<{version}-plugins-{type}s-{plugin}-period>> |{logstash-ref}/configuration-file-structure.html#number[number]|No
| <<{version}-plugins-{type}s-{plugin}-proxy_uri>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
| <<{version}-plugins-{type}s-{plugin}-region>> |{logstash-ref}/configuration-file-structure.html#string[string], one of `["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-central-1", "eu-west-1", "eu-west-2", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "sa-east-1", "us-gov-west-1", "cn-north-1", "ap-south-1", "ca-central-1"]`|No
| <<{version}-plugins-{type}s-{plugin}-secret_access_key>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
| <<{version}-plugins-{type}s-{plugin}-session_token>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
| <<{version}-plugins-{type}s-{plugin}-statistics>> |{logstash-ref}/configuration-file-structure.html#array[array]|No
| <<{version}-plugins-{type}s-{plugin}-use_ssl>> |{logstash-ref}/configuration-file-structure.html#boolean[boolean]|No
|=======================================================================

Also see <<{version}-plugins-{type}s-{plugin}-common-options>> for a list of options supported by all
input plugins.

&nbsp;

[id="{version}-plugins-{type}s-{plugin}-access_key_id"]
===== `access_key_id` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * There is no default value for this setting.

This plugin uses the AWS SDK and supports several ways to get credentials, which will be tried in this order:

1. Static configuration, using `access_key_id` and `secret_access_key` params in logstash plugin config
2. External credentials file specified by `aws_credentials_file`
3. Environment variables `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`
4. Environment variables `AMAZON_ACCESS_KEY_ID` and `AMAZON_SECRET_ACCESS_KEY`
5. IAM Instance Profile (available when running inside EC2)

[id="{version}-plugins-{type}s-{plugin}-aws_credentials_file"]
===== `aws_credentials_file` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * There is no default value for this setting.

Path to YAML file containing a hash of AWS credentials.
This file will only be loaded if `access_key_id` and
`secret_access_key` aren't set. The contents of the
file should look like this:

[source,ruby]
----------------------------------
    :access_key_id: "12345"
    :secret_access_key: "54321"
----------------------------------


[id="{version}-plugins-{type}s-{plugin}-combined"]
===== `combined` 

  * Value type is {logstash-ref}/configuration-file-structure.html#boolean[boolean]
  * Default value is `false`

Use this for namespaces that need to combine the dimensions like S3 and SNS.

[id="{version}-plugins-{type}s-{plugin}-filters"]
===== `filters` 

  * This is a required setting.
  * Value type is {logstash-ref}/configuration-file-structure.html#array[array]
  * There is no default value for this setting.

Specify the filters to apply when fetching resources:

This needs to follow the AWS convention of specifiying filters.
Instances: { 'instance-id' => 'i-12344321' }
Tags: { "tag:Environment" => "Production" }
Volumes: { 'attachment.status' => 'attached' }
Each namespace uniquely support certian dimensions. Please consult the documentation
to ensure you're using valid filters.

[id="{version}-plugins-{type}s-{plugin}-interval"]
===== `interval` 

  * Value type is {logstash-ref}/configuration-file-structure.html#number[number]
  * Default value is `900`

Set how frequently CloudWatch should be queried

The default, `900`, means check every 15 minutes. Setting this value too low
(generally less than 300) results in no metrics being returned from CloudWatch.

[id="{version}-plugins-{type}s-{plugin}-metrics"]
===== `metrics` 

  * Value type is {logstash-ref}/configuration-file-structure.html#array[array]
  * Default value is `["CPUUtilization", "DiskReadOps", "DiskWriteOps", "NetworkIn", "NetworkOut"]`

Specify the metrics to fetch for the namespace. The defaults are AWS/EC2 specific. See http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html
for the available metrics for other namespaces.

[id="{version}-plugins-{type}s-{plugin}-namespace"]
===== `namespace` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * Default value is `"AWS/EC2"`

If undefined, LogStash will complain, even if codec is unused.
The service namespace of the metrics to fetch.

The default is for the EC2 service. See http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html
for valid values.

[id="{version}-plugins-{type}s-{plugin}-period"]
===== `period` 

  * Value type is {logstash-ref}/configuration-file-structure.html#number[number]
  * Default value is `300`

Set the granularity of the returned datapoints.

Must be at least 60 seconds and in multiples of 60.

[id="{version}-plugins-{type}s-{plugin}-proxy_uri"]
===== `proxy_uri` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * There is no default value for this setting.

URI to proxy server if required

[id="{version}-plugins-{type}s-{plugin}-region"]
===== `region` 

  * Value can be any of: `us-east-1`, `us-east-2`, `us-west-1`, `us-west-2`, `eu-central-1`, `eu-west-1`, `eu-west-2`, `ap-southeast-1`, `ap-southeast-2`, `ap-northeast-1`, `ap-northeast-2`, `sa-east-1`, `us-gov-west-1`, `cn-north-1`, `ap-south-1`, `ca-central-1`
  * Default value is `"us-east-1"`

The AWS Region

[id="{version}-plugins-{type}s-{plugin}-secret_access_key"]
===== `secret_access_key` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * There is no default value for this setting.

The AWS Secret Access Key

[id="{version}-plugins-{type}s-{plugin}-session_token"]
===== `session_token` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * There is no default value for this setting.

The AWS Session token for temporary credential

[id="{version}-plugins-{type}s-{plugin}-statistics"]
===== `statistics` 

  * Value type is {logstash-ref}/configuration-file-structure.html#array[array]
  * Default value is `["SampleCount", "Average", "Minimum", "Maximum", "Sum"]`

Specify the statistics to fetch for each namespace

[id="{version}-plugins-{type}s-{plugin}-use_ssl"]
===== `use_ssl` 

  * Value type is {logstash-ref}/configuration-file-structure.html#boolean[boolean]
  * Default value is `true`

Make sure we require the V1 classes when including this module.
require 'aws-sdk' will load v2 classes.
Should we require (true) or disable (false) using SSL for communicating with the AWS API
The AWS SDK for Ruby defaults to SSL so we preserve that



[id="{version}-plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]