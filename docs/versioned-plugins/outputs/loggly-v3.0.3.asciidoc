:plugin: loggly
:type: output

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: v3.0.3
:release_date: 2017-11-07
:changelog_url: https://github.com/logstash-plugins/logstash-output-loggly/blob/v3.0.3/CHANGELOG.md
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="{version}-plugins-{type}s-{plugin}"]

=== Loggly output plugin {version}

include::{include_path}/plugin_header.asciidoc[]

==== Description

Ugly monkey patch to get around http://jira.codehaus.org/browse/JRUBY-5529
Got a loggly account? Use logstash to ship logs to Loggly!

This is most useful so you can use logstash to parse and structure
your logs and ship structured, json events to your account at Loggly.

To use this, you'll need to use a Loggly input with type 'http'
and 'json logging' enabled.

[id="{version}-plugins-{type}s-{plugin}-options"]
==== Loggly Output Configuration Options

This plugin supports the following configuration options plus the <<{version}-plugins-{type}s-{plugin}-common-options>> described later.

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<{version}-plugins-{type}s-{plugin}-can_retry>> |{logstash-ref}/configuration-file-structure.html#boolean[boolean]|No
| <<{version}-plugins-{type}s-{plugin}-host>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
| <<{version}-plugins-{type}s-{plugin}-key>> |{logstash-ref}/configuration-file-structure.html#string[string]|Yes
| <<{version}-plugins-{type}s-{plugin}-proto>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
| <<{version}-plugins-{type}s-{plugin}-proxy_host>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
| <<{version}-plugins-{type}s-{plugin}-proxy_password>> |{logstash-ref}/configuration-file-structure.html#password[password]|No
| <<{version}-plugins-{type}s-{plugin}-proxy_port>> |{logstash-ref}/configuration-file-structure.html#number[number]|No
| <<{version}-plugins-{type}s-{plugin}-proxy_user>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
| <<{version}-plugins-{type}s-{plugin}-retry_count>> |{logstash-ref}/configuration-file-structure.html#number[number]|No
| <<{version}-plugins-{type}s-{plugin}-tag>> |{logstash-ref}/configuration-file-structure.html#string[string]|No
|=======================================================================

Also see <<{version}-plugins-{type}s-{plugin}-common-options>> for a list of options supported by all
output plugins.

&nbsp;

[id="{version}-plugins-{type}s-{plugin}-can_retry"]
===== `can_retry` 

  * Value type is {logstash-ref}/configuration-file-structure.html#boolean[boolean]
  * Default value is `true`

Can Retry.
Setting this value true helps user to send multiple retry attempts if the first request fails

[id="{version}-plugins-{type}s-{plugin}-host"]
===== `host` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * Default value is `"logs-01.loggly.com"`

The hostname to send logs to. This should target the loggly http input
server which is usually "logs-01.loggly.com" (Gen2 account).
See Loggly HTTP endpoint documentation at
https://www.loggly.com/docs/http-endpoint/

[id="{version}-plugins-{type}s-{plugin}-key"]
===== `key` 

  * This is a required setting.
  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * There is no default value for this setting.

The loggly http input key to send to.
This is usually visible in the Loggly 'Inputs' page as something like this:
....
    https://logs-01.loggly.net/inputs/abcdef12-3456-7890-abcd-ef0123456789
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          \---------->   key   <-------------/
....
You can use `%{foo}` field lookups here if you need to pull the api key from
the event. This is mainly aimed at multitenant hosting providers who want
to offer shipping a customer's logs to that customer's loggly account.

[id="{version}-plugins-{type}s-{plugin}-proto"]
===== `proto` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * Default value is `"http"`

Should the log action be sent over https instead of plain http

[id="{version}-plugins-{type}s-{plugin}-proxy_host"]
===== `proxy_host` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * There is no default value for this setting.

Proxy Host

[id="{version}-plugins-{type}s-{plugin}-proxy_password"]
===== `proxy_password` 

  * Value type is {logstash-ref}/configuration-file-structure.html#password[password]
  * Default value is `""`

Proxy Password

[id="{version}-plugins-{type}s-{plugin}-proxy_port"]
===== `proxy_port` 

  * Value type is {logstash-ref}/configuration-file-structure.html#number[number]
  * There is no default value for this setting.

Proxy Port

[id="{version}-plugins-{type}s-{plugin}-proxy_user"]
===== `proxy_user` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * There is no default value for this setting.

Proxy Username

[id="{version}-plugins-{type}s-{plugin}-retry_count"]
===== `retry_count` 

  * Value type is {logstash-ref}/configuration-file-structure.html#number[number]
  * Default value is `5`

Retry count. 
It may be possible that the request may timeout due to slow Internet connection
if such condition appears, retry_count helps in retrying request for multiple times
It will try to submit request until retry_count and then halt

[id="{version}-plugins-{type}s-{plugin}-tag"]
===== `tag` 

  * Value type is {logstash-ref}/configuration-file-structure.html#string[string]
  * Default value is `"logstash"`

Loggly Tag
Tag helps you to find your logs in the Loggly dashboard easily
You can make a search in Loggly using tag as "tag:logstash-contrib"
or the tag set by you in the config file.

You can use %{somefield} to allow for custom tag values.
Helpful for leveraging Loggly source groups.
https://www.loggly.com/docs/source-groups/



[id="{version}-plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]