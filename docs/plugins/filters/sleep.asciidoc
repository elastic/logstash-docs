[[plugins-filters-sleep]]
=== sleep

* Version: 3.0.3
* Released on: December 26, 2016
* https://github.com/logstash-plugins/logstash-filter-sleep/blob/master/CHANGELOG.md#303[Changelog]



==== Getting Help

For questions about the plugin, open a topic in the http://discuss.elastic.co[Discuss] forums. For bugs or feature requests, open an issue in https://github.com/elastic/logstash[Github].
For the list of Elastic supported plugins, please consult the https://www.elastic.co/support/matrix#show_logstash_plugins[Elastic Support Matrix].

==== Description

Sleep a given amount of time. This will cause logstash
to stall for the given amount of time. This is useful
for rate limiting, etc.


&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
sleep {
}
--------------------------



Available configuration options:

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-filters-sleep-add_field>> |<<hash,hash>>|No
| <<plugins-filters-sleep-add_tag>> |<<array,array>>|No
| <<plugins-filters-sleep-enable_metric>> |<<boolean,boolean>>|No
| <<plugins-filters-sleep-every>> |<<string,string>>|No
| <<plugins-filters-sleep-id>> |<<string,string>>|No
| <<plugins-filters-sleep-periodic_flush>> |<<boolean,boolean>>|No
| <<plugins-filters-sleep-remove_field>> |<<array,array>>|No
| <<plugins-filters-sleep-remove_tag>> |<<array,array>>|No
| <<plugins-filters-sleep-replay>> |<<boolean,boolean>>|No
| <<plugins-filters-sleep-time>> |<<string,string>>|No
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-sleep-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
-----
    filter {
      sleep {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
-----    
    
[source,ruby]
-----
    # You can also add multiple fields at once:
    filter {
      sleep {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-sleep-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      sleep {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple tags at once:
    filter {
      sleep {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-sleep-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-filters-sleep-every]]
===== `every` 

  * Value type is <<string,string>>
  * Default value is `1`

Sleep on every N'th. This option is ignored in replay mode.

Example:
[source,ruby]
-----
    filter {
      sleep {
        time => "1"   # Sleep 1 second
        every => 10   # on every 10th event
      }
    }
-----

[[plugins-filters-sleep-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin configuration. If no ID is specified, Logstash will generate one. 
It is strongly recommended to set this ID in your configuration. This is particularly useful 
when you have two or more plugins of the same type, for example, if you have 2 grok filters. 
Adding a named ID in this case will help in monitoring Logstash when using the monitoring APIs.

[source,ruby]
---------------------------------------------------------------------------------------------------
output {
 stdout {
   id => "my_plugin_id"
 }
}
---------------------------------------------------------------------------------------------------


[[plugins-filters-sleep-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-sleep-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}

Example:
[source,ruby]
-----
    filter {
      sleep {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple fields at once:
    filter {
      sleep {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-sleep-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      sleep {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple tags at once:
    filter {
      sleep {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-sleep-replay]]
===== `replay` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Enable replay mode.

Replay mode tries to sleep based on timestamps in each event.

The amount of time to sleep is computed by subtracting the
previous event's timestamp from the current event's timestamp.
This helps you replay events in the same timeline as original.

If you specify a `time` setting as well, this filter will
use the `time` value as a speed modifier. For example,
a `time` value of 2 will replay at double speed, while a
value of 0.25 will replay at 1/4th speed.

For example:
[source,ruby]
-----
    filter {
      sleep {
        time => 2
        replay => true
      }
    }
-----

The above will sleep in such a way that it will perform
replay 2-times faster than the original time speed.

[[plugins-filters-sleep-time]]
===== `time` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

The length of time to sleep, in seconds, for every event.

This can be a number (eg, 0.5), or a string (eg, `%{foo}`)
The second form (string with a field value) is useful if
you have an attribute of your event that you want to use
to indicate the amount of time to sleep.

Example:
[source,ruby]
-----
    filter {
      sleep {
        # Sleep 1 second for every event.
        time => "1"
      }
    }
-----

