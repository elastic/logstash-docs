[[plugins-filters-elasticsearch]]
=== elasticsearch

* Version: 3.1.0
* Released on: 2016-12-16
* https://github.com/logstash-plugins/logstash-filter-elasticsearch/blob/master/CHANGELOG.md#310[Changelog]



NOTE: This plugin does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-filter-elasticsearch`.


.Compatibility Note
[NOTE]
================================================================================
Starting with Elasticsearch 5.3, there's an {ref}modules-http.html[HTTP setting]
called `http.content_type.required`. If this option is set to `true`, and you
are using Logstash 2.4 through 5.2, you need to update the Elasticsearch filter
plugin to version 3.1.1 or higher.

================================================================================

Search Elasticsearch for a previous log event and copy some fields from it
into the current event.  Below are two complete examples of how this filter might
be used.

The first example uses the legacy 'query' parameter where the user is limited to an Elasticsearch query_string.
Whenever logstash receives an "end" event, it uses this elasticsearch
filter to find the matching "start" event based on some operation identifier.
Then it copies the `@timestamp` field from the "start" event into a new field on
the "end" event.  Finally, using a combination of the "date" filter and the
"ruby" filter, we calculate the time duration in hours between the two events.
[source,ruby]
--------------------------------------------------
      if [type] == "end" {
         elasticsearch {
            hosts => ["es-server"]
            query => "type:start AND operation:%{[opid]}"
            fields => { "@timestamp" => "started" }
         }

         date {
            match => ["[started]", "ISO8601"]
            target => "[started]"
         }

         ruby {
            code => "event['duration_hrs'] = (event['@timestamp'] - event['started']) / 3600 rescue nil"
         }
      }

 The example below reproduces the above example but utilises the query_template.  This query_template represents a full
 Elasticsearch query DSL and supports the standard Logstash field substitution syntax.  The example below issues
 the same query as the first example but uses the template shown.

  if [type] == "end" {
         elasticsearch {
            hosts => ["es-server"]
            query_template => "template.json"
         }

         date {
            match => ["[started]", "ISO8601"]
            target => "[started]"
         }

         ruby {
            code => "event['duration_hrs'] = (event['@timestamp'] - event['started']) / 3600 rescue nil"
         }
  }



  template.json:

 {
    "query": {
      "query_string": {
       "query": "type:start AND operation:%{[opid]}"
      }
    },
   "_source": ["@timestamp", "started"]
 }

As illustrated above, through the use of 'opid', fields from the Logstash events can be referenced within the template.
The template will be populated per event prior to being used to query Elasticsearch.

--------------------------------------------------

&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
elasticsearch {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-elasticsearch-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-elasticsearch-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-elasticsearch-ca_file>> |a valid filesystem path|No|
| <<plugins-filters-elasticsearch-enable_metric>> |<<boolean,boolean>>|No|`true`
| <<plugins-filters-elasticsearch-enable_sort>> |<<boolean,boolean>>|No|`true`
| <<plugins-filters-elasticsearch-fields>> |<<array,array>>|No|`{}`
| <<plugins-filters-elasticsearch-hosts>> |<<array,array>>|No|`["localhost:9200"]`
| <<plugins-filters-elasticsearch-id>> |<<string,string>>|No|
| <<plugins-filters-elasticsearch-index>> |<<string,string>>|No|`""`
| <<plugins-filters-elasticsearch-password>> |<<password,password>>|No|
| <<plugins-filters-elasticsearch-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-elasticsearch-query>> |<<string,string>>|No|
| <<plugins-filters-elasticsearch-query_template>> |<<string,string>>|No|
| <<plugins-filters-elasticsearch-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-elasticsearch-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-elasticsearch-result_size>> |<<number,number>>|No|`1`
| <<plugins-filters-elasticsearch-sort>> |<<string,string>>|No|`"@timestamp:desc"`
| <<plugins-filters-elasticsearch-ssl>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-elasticsearch-tag_on_failure>> |<<array,array>>|No|`["_elasticsearch_lookup_failure"]`
| <<plugins-filters-elasticsearch-user>> |<<string,string>>|No|
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-elasticsearch-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
-----
    filter {
      elasticsearch {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple fields at once:
    filter {
      elasticsearch {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-elasticsearch-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      elasticsearch {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple tags at once:
    filter {
      elasticsearch {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-elasticsearch-ca_file]]
===== `ca_file` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

SSL Certificate Authority file

[[plugins-filters-elasticsearch-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-filters-elasticsearch-enable_sort]]
===== `enable_sort` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Whether results should be sorted or not

[[plugins-filters-elasticsearch-fields]]
===== `fields` 

  * Value type is <<array,array>>
  * Default value is `{}`

Array of fields to copy from old event (found via elasticsearch) into new event

[[plugins-filters-elasticsearch-hosts]]
===== `hosts` 

  * Value type is <<array,array>>
  * Default value is `["localhost:9200"]`

List of elasticsearch hosts to use for querying.

[[plugins-filters-elasticsearch-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin instance, this `ID` is used for tracking
information for a specific configuration of the plugin.

```
output {
 stdout {
   id => "ABC"
 }
}
```

If you don't explicitely set this variable Logstash will generate a unique name.

[[plugins-filters-elasticsearch-index]]
===== `index` 

  * Value type is <<string,string>>
  * Default value is `""`

Comma-delimited list of index names to search; use `_all` or empty string to perform the operation on all indices

[[plugins-filters-elasticsearch-password]]
===== `password` 

  * Value type is <<password,password>>
  * There is no default value for this setting.

Basic Auth - password

[[plugins-filters-elasticsearch-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-elasticsearch-query]]
===== `query` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Elasticsearch query string. Read the Elasticsearch query string documentation.
for more info at: https://www.elastic.co/guide/en/elasticsearch/reference/master/query-dsl-query-string-query.html#query-string-syntax

[[plugins-filters-elasticsearch-query_template]]
===== `query_template` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

File path to elasticsearch query in DSL format. Read the Elasticsearch query documentation
for more info at: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html

[[plugins-filters-elasticsearch-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}

Example:
[source,ruby]
-----
    filter {
      elasticsearch {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple fields at once:
    filter {
      elasticsearch {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-elasticsearch-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      elasticsearch {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple tags at once:
    filter {
      elasticsearch {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-elasticsearch-result_size]]
===== `result_size` 

  * Value type is <<number,number>>
  * Default value is `1`

How many results to return

[[plugins-filters-elasticsearch-sort]]
===== `sort` 

  * Value type is <<string,string>>
  * Default value is `"@timestamp:desc"`

Comma-delimited list of `<field>:<direction>` pairs that define the sort order

[[plugins-filters-elasticsearch-ssl]]
===== `ssl` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

SSL

[[plugins-filters-elasticsearch-tag_on_failure]]
===== `tag_on_failure` 

  * Value type is <<array,array>>
  * Default value is `["_elasticsearch_lookup_failure"]`

Tags the event on failure to look up geo information. This can be used in later analysis.

[[plugins-filters-elasticsearch-user]]
===== `user` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Basic Auth - username


