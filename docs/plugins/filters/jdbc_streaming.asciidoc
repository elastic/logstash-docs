:plugin: jdbc_streaming
:type: filter

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

=== Jdbc_streaming filter plugin

include::{include_path}/plugin_header.asciidoc[]

==== Description

This filter executes a SQL query and store the result set in the field
specified as `target`.
It will cache the results locally in an LRU cache with expiry

For example you can load a row based on an id from in the event

[source,ruby]
filter {
  jdbc_streaming {
    jdbc_driver_library => "/path/to/mysql-connector-java-5.1.34-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => ""jdbc:mysql://localhost:3306/mydatabase"
    jdbc_user => "me"
    jdbc_password => "secret"
    statement => "select * from WORLD.COUNTRY WHERE Code = :code"
    parameters => { "code" => "country_code"}
    target => "country_details"
  }
}


[id="plugins-{type}s-{plugin}-options"]
==== Jdbc_streaming Filter Configuration Options

This plugin supports the following configuration options plus the <<plugins-{type}s-{plugin}-common-options>> described later.

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-cache_expiration>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-cache_size>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-default_hash>> |<<hash,hash>>|No
| <<plugins-{type}s-{plugin}-jdbc_connection_string>> |<<string,string>>|Yes
| <<plugins-{type}s-{plugin}-jdbc_driver_class>> |<<string,string>>|Yes
| <<plugins-{type}s-{plugin}-jdbc_driver_library>> |a valid filesystem path|No
| <<plugins-{type}s-{plugin}-jdbc_password>> |<<password,password>>|No
| <<plugins-{type}s-{plugin}-jdbc_user>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-jdbc_validate_connection>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-jdbc_validation_timeout>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-parameters>> |<<hash,hash>>|No
| <<plugins-{type}s-{plugin}-statement>> |<<string,string>>|Yes
| <<plugins-{type}s-{plugin}-tag_on_default_use>> |<<array,array>>|No
| <<plugins-{type}s-{plugin}-tag_on_failure>> |<<array,array>>|No
| <<plugins-{type}s-{plugin}-target>> |<<string,string>>|Yes
| <<plugins-{type}s-{plugin}-use_cache>> |<<boolean,boolean>>|No
|=======================================================================

Also see <<plugins-{type}s-{plugin}-common-options>> for a list of options supported by all
filter plugins.

&nbsp;

[id="plugins-{type}s-{plugin}-cache_expiration"]
===== `cache_expiration` 

  * Value type is <<number,number>>
  * Default value is `5.0`

The minimum number of seconds any entry should remain in the cache, defaults to 5 seconds
A numeric value, you can use decimals for example `{ "cache_expiration" => 0.25 }`
If there are transient jdbc errors the cache will store empty results for a given
parameter set and bypass the jbdc lookup, this merges the default_hash into the event, until
the cache entry expires, then the jdbc lookup will be tried again for the same parameters
Conversely, while the cache contains valid results any external problem that would cause
jdbc errors, will not be noticed for the cache_expiration period.

[id="plugins-{type}s-{plugin}-cache_size"]
===== `cache_size` 

  * Value type is <<number,number>>
  * Default value is `500`

The maximum number of cache entries are stored, defaults to 500 entries
The least recently used entry will be evicted

[id="plugins-{type}s-{plugin}-default_hash"]
===== `default_hash` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Define a default object to use when lookup fails to return a matching row.
ensure that the key names of this object match the columns from the statement

[id="plugins-{type}s-{plugin}-jdbc_connection_string"]
===== `jdbc_connection_string` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

JDBC connection string

[id="plugins-{type}s-{plugin}-jdbc_driver_class"]
===== `jdbc_driver_class` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

JDBC driver class to load, for example "oracle.jdbc.OracleDriver" or "org.apache.derby.jdbc.ClientDriver"

[id="plugins-{type}s-{plugin}-jdbc_driver_library"]
===== `jdbc_driver_library` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

Tentative of abstracting JDBC logic to a mixin
for potential reuse in other plugins (input/output)
This method is called when someone includes this module
Add these methods to the 'base' given.
JDBC driver library path to third party driver library.

[id="plugins-{type}s-{plugin}-jdbc_password"]
===== `jdbc_password` 

  * Value type is <<password,password>>
  * There is no default value for this setting.

JDBC password

[id="plugins-{type}s-{plugin}-jdbc_user"]
===== `jdbc_user` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

JDBC user

[id="plugins-{type}s-{plugin}-jdbc_validate_connection"]
===== `jdbc_validate_connection` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Connection pool configuration.
Validate connection before use.

[id="plugins-{type}s-{plugin}-jdbc_validation_timeout"]
===== `jdbc_validation_timeout` 

  * Value type is <<number,number>>
  * Default value is `3600`

Connection pool configuration.
How often to validate a connection (in seconds)

[id="plugins-{type}s-{plugin}-parameters"]
===== `parameters` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Hash of query parameter, for example `{ "id" => "id_field" }`

[id="plugins-{type}s-{plugin}-statement"]
===== `statement` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

Statement to execute.
To use parameters, use named parameter syntax, for example "SELECT * FROM MYTABLE WHERE ID = :id"

[id="plugins-{type}s-{plugin}-tag_on_default_use"]
===== `tag_on_default_use` 

  * Value type is <<array,array>>
  * Default value is `["_jdbcstreamingdefaultsused"]`

Append values to the `tags` field if no record was found and default values were used

[id="plugins-{type}s-{plugin}-tag_on_failure"]
===== `tag_on_failure` 

  * Value type is <<array,array>>
  * Default value is `["_jdbcstreamingfailure"]`

Append values to the `tags` field if sql error occured

[id="plugins-{type}s-{plugin}-target"]
===== `target` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

Define the target field to store the extracted result(s)
Field is overwritten if exists

[id="plugins-{type}s-{plugin}-use_cache"]
===== `use_cache` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Enable or disable caching, boolean true or false, defaults to true



[id="plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]