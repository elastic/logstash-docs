[[plugins-filters-geoip]]
=== geoip

The GeoIP filter adds information about the geographical location of IP addresses,
based on data from the Maxmind database.

Starting with version 1.3.0 of Logstash, a `[geoip][location]` field is created if
the GeoIP lookup returns a latitude and longitude. The field is stored in
http://geojson.org/geojson-spec.html[GeoJSON] format. Additionally,
the default Elasticsearch template provided with the
http://www.elasticsearch.org/guide/en/logstash/current/output/elasticsearch.html[elasticsearch output]
maps the `[geoip][location]` field to a
http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html[geo_point].

As this field is a `geo_point` _and_ it is still valid GeoJSON, you get
the awesomeness of Elasticsearch's geospatial query, facet and filter functions
and the flexibility of having GeoJSON for all other applications (like Kibana's
http://www.elasticsearch.org/guide/en/kibana/current/_bettermap.html[bettermap panel]).

Logstash releases ship with the GeoLiteCity database made available from
Maxmind with a CCA-ShareAlike 3.0 license. For more details on GeoLite, see
<http://www.maxmind.com/en/geolite>.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
geoip {
    source => ... 
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-geoip-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-geoip-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-geoip-database>> |a valid filesystem path|No|
| <<plugins-filters-geoip-fields>> |<<array,array>>|No|
| <<plugins-filters-geoip-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-geoip-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-geoip-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-geoip-source>> |<<string,string>>|Yes|
| <<plugins-filters-geoip-target>> |<<string,string>>|No|`"geoip"`
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-geoip-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      geoip {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      geoip {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-geoip-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      geoip {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      geoip {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-geoip-database]]
===== `database` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

The path to the GeoIP database file which Logstash should use. Country, City, ASN, ISP
and organization databases are supported.

If not specified, this will default to the GeoLiteCity database that ships
with Logstash.

[[plugins-filters-geoip-exclude_tags]]
===== `exclude_tags`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<array,array>>
  * Default value is `[]`

Only handle events without all/any (controlled by `exclude_any` config
option) of these tags.
Optional.

[[plugins-filters-geoip-fields]]
===== `fields` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

An array of geoip fields to be included in the event.

Possible fields depend on the database type. By default, all geoip fields
are included in the event.

For the built-in GeoLiteCity database, the following are available:
`city\_name`, `continent\_code`, `country\_code2`, `country\_code3`, `country\_name`,
`dma\_code`, `ip`, `latitude`, `longitude`, `postal\_code`, `region\_name` and `timezone`.

[[plugins-filters-geoip-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-geoip-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      geoip {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      geoip {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-geoip-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      geoip {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      geoip {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-geoip-source]]
===== `source` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

The field containing the IP address or hostname to map via geoip. If
this field is an array, only the first value will be used.

[[plugins-filters-geoip-tags]]
===== `tags`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<array,array>>
  * Default value is `[]`

Only handle events with all/any (controlled by `include_any` config option) of these tags.
Optional.

[[plugins-filters-geoip-target]]
===== `target` 

  * Value type is <<string,string>>
  * Default value is `"geoip"`

Specify the field into which Logstash should store the geoip data.
This can be useful, for example, if you have `src\_ip` and `dst\_ip` fields and
would like the GeoIP information of both IPs.

If you save the data to a target field other than `geoip` and want to use the
`geo\_point` related functions in Elasticsearch, you need to alter the template
provided with the Elasticsearch output and configure the output to use the
new template.

Even if you don't use the `geo\_point` mapping, the `[target][location]` field
is still valid GeoJSON.

[[plugins-filters-geoip-type]]
===== `type`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<string,string>>
  * Default value is `""`

Note that all of the specified routing options (`type`,`tags`,`exclude_tags`,`include_fields`,
`exclude_fields`) must be met in order for the event to be handled by the filter.
The type to act on. If a type is given, then this filter will only
act on messages with the same type. See any input plugin's "type"
attribute for more.
Optional.

