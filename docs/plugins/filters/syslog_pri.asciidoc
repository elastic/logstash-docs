[[plugins-filters-syslog_pri]]
=== syslog_pri

* Version: 3.0.2
* Released on: July 14, 2016
* https://github.com/logstash-plugins/logstash-filter-syslog_pri/blob/master/CHANGELOG.md#302[Changelog]



==== Getting Help

For questions about the plugin, open a topic in the http://discuss.elastic.co[Discuss] forums. For bugs or feature requests, open an issue in https://github.com/elastic/logstash[Github].
For the list of Elastic supported plugins, please consult the https://www.elastic.co/support/matrix#show_logstash_plugins[Elastic Support Matrix].

==== Description

Filter plugin for logstash to parse the `PRI` field from the front
of a Syslog (RFC3164) message.  If no priority is set, it will
default to 13 (per RFC).

This filter is based on the original `syslog.rb` code shipped
with logstash.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
syslog_pri {
}
--------------------------



Available configuration options:

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-filters-syslog_pri-add_field>> |<<hash,hash>>|No
| <<plugins-filters-syslog_pri-add_tag>> |<<array,array>>|No
| <<plugins-filters-syslog_pri-enable_metric>> |<<boolean,boolean>>|No
| <<plugins-filters-syslog_pri-facility_labels>> |<<array,array>>|No
| <<plugins-filters-syslog_pri-id>> |<<string,string>>|No
| <<plugins-filters-syslog_pri-periodic_flush>> |<<boolean,boolean>>|No
| <<plugins-filters-syslog_pri-remove_field>> |<<array,array>>|No
| <<plugins-filters-syslog_pri-remove_tag>> |<<array,array>>|No
| <<plugins-filters-syslog_pri-severity_labels>> |<<array,array>>|No
| <<plugins-filters-syslog_pri-syslog_pri_field_name>> |<<string,string>>|No
| <<plugins-filters-syslog_pri-use_labels>> |<<boolean,boolean>>|No
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-syslog_pri-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
-----
    filter {
      syslog_pri {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple fields at once:
    filter {
      syslog_pri {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-syslog_pri-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      syslog_pri {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple tags at once:
    filter {
      syslog_pri {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-syslog_pri-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-filters-syslog_pri-facility_labels]]
===== `facility_labels` 

  * Value type is <<array,array>>
  * Default value is `["kernel", "user-level", "mail", "daemon", "security/authorization", "syslogd", "line printer", "network news", "uucp", "clock", "security/authorization", "ftp", "ntp", "log audit", "log alert", "clock", "local0", "local1", "local2", "local3", "local4", "local5", "local6", "local7"]`

Labels for facility levels. This comes from RFC3164.

[[plugins-filters-syslog_pri-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin configuration. If no ID is specified, Logstash will generate one. 
It is strongly recommended to set this ID in your configuration. This is particularly useful 
when you have two or more plugins of the same type, for example, if you have 2 grok filters. 
Adding a named ID in this case will help in monitoring Logstash when using the monitoring APIs.

[source,ruby]
---------------------------------------------------------------------------------------------------
output {
 stdout {
   id => "my_plugin_id"
 }
}
---------------------------------------------------------------------------------------------------


[[plugins-filters-syslog_pri-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-syslog_pri-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}

Example:
[source,ruby]
-----
    filter {
      syslog_pri {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple fields at once:
    filter {
      syslog_pri {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-syslog_pri-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      syslog_pri {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple tags at once:
    filter {
      syslog_pri {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-syslog_pri-severity_labels]]
===== `severity_labels` 

  * Value type is <<array,array>>
  * Default value is `["emergency", "alert", "critical", "error", "warning", "notice", "informational", "debug"]`

Labels for severity levels. This comes from RFC3164.

[[plugins-filters-syslog_pri-syslog_pri_field_name]]
===== `syslog_pri_field_name` 

  * Value type is <<string,string>>
  * Default value is `"syslog_pri"`

Name of field which passes in the extracted PRI part of the syslog message

[[plugins-filters-syslog_pri-use_labels]]
===== `use_labels` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

set the status to experimental/beta/stable
Add human-readable names after parsing severity and facility from PRI


