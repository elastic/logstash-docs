[[plugins-filters-csv]]
=== csv

* Version: 3.0.2
* Released on: July 14, 2016
* https://github.com/logstash-plugins/logstash-filter-csv/blob/master/CHANGELOG.md#302[Changelog]



==== Getting Help

For questions about the plugin, open a topic in the http://discuss.elastic.co[Discuss] forums. For bugs or feature requests, open an issue in https://github.com/elastic/logstash[Github].
For the list of Elastic supported plugins, please consult the https://www.elastic.co/support/matrix#show_logstash_plugins[Elastic Support Matrix].

==== Description

The CSV filter takes an event field containing CSV data, parses it,
and stores it as individual fields (can optionally specify the names).
This filter can also parse data with any separator, not just commas.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
csv {
}
--------------------------



Available configuration options:

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-filters-csv-add_field>> |<<hash,hash>>|No
| <<plugins-filters-csv-add_tag>> |<<array,array>>|No
| <<plugins-filters-csv-autogenerate_column_names>> |<<boolean,boolean>>|No
| <<plugins-filters-csv-columns>> |<<array,array>>|No
| <<plugins-filters-csv-convert>> |<<hash,hash>>|No
| <<plugins-filters-csv-enable_metric>> |<<boolean,boolean>>|No
| <<plugins-filters-csv-id>> |<<string,string>>|No
| <<plugins-filters-csv-periodic_flush>> |<<boolean,boolean>>|No
| <<plugins-filters-csv-quote_char>> |<<string,string>>|No
| <<plugins-filters-csv-remove_field>> |<<array,array>>|No
| <<plugins-filters-csv-remove_tag>> |<<array,array>>|No
| <<plugins-filters-csv-separator>> |<<string,string>>|No
| <<plugins-filters-csv-skip_empty_columns>> |<<boolean,boolean>>|No
| <<plugins-filters-csv-source>> |<<string,string>>|No
| <<plugins-filters-csv-target>> |<<string,string>>|No
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-csv-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
-----
    filter {
      csv {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple fields at once:
    filter {
      csv {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-csv-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      csv {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple tags at once:
    filter {
      csv {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-csv-autogenerate_column_names]]
===== `autogenerate_column_names` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Define whether column names should autogenerated or not.
Defaults to true. If set to false, columns not having a header specified will not be parsed.

[[plugins-filters-csv-columns]]
===== `columns` 

  * Value type is <<array,array>>
  * Default value is `[]`

Define a list of column names (in the order they appear in the CSV,
as if it were a header line). If `columns` is not configured, or there
are not enough columns specified, the default column names are
"column1", "column2", etc. In the case that there are more columns
in the data than specified in this column list, extra columns will be auto-numbered:
(e.g. "user_defined_1", "user_defined_2", "column3", "column4", etc.)

[[plugins-filters-csv-convert]]
===== `convert` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Define a set of datatype conversions to be applied to columns.
Possible conversions are integer, float, date, date_time, boolean

Example:
[source,ruby]
-----
    filter {
      csv {
        convert => { "column1" => "integer", "column2" => "boolean" }
      }
    }
-----

[[plugins-filters-csv-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-filters-csv-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin configuration. If no ID is specified, Logstash will generate one. 
It is strongly recommended to set this ID in your configuration. This is particularly useful 
when you have two or more plugins of the same type, for example, if you have 2 grok filters. 
Adding a named ID in this case will help in monitoring Logstash when using the monitoring APIs.

[source,ruby]
---------------------------------------------------------------------------------------------------
output {
 stdout {
   id => "my_plugin_id"
 }
}
---------------------------------------------------------------------------------------------------


[[plugins-filters-csv-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-csv-quote_char]]
===== `quote_char` 

  * Value type is <<string,string>>
  * Default value is `"\""`

Define the character used to quote CSV fields. If this is not specified
the default is a double quote `"`.
Optional.

[[plugins-filters-csv-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}

Example:
[source,ruby]
-----
    filter {
      csv {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple fields at once:
    filter {
      csv {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-csv-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      csv {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple tags at once:
    filter {
      csv {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-csv-separator]]
===== `separator` 

  * Value type is <<string,string>>
  * Default value is `","`

Define the column separator value. If this is not specified, the default
is a comma `,`.
Optional.

[[plugins-filters-csv-skip_empty_columns]]
===== `skip_empty_columns` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Define whether empty columns should be skipped.
Defaults to false. If set to true, columns containing no value will not get set.

[[plugins-filters-csv-source]]
===== `source` 

  * Value type is <<string,string>>
  * Default value is `"message"`

The CSV data in the value of the `source` field will be expanded into a
data structure.

[[plugins-filters-csv-target]]
===== `target` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Define target field for placing the data.
Defaults to writing to the root of the event.


