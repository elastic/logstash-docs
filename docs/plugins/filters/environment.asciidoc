[[plugins-filters-environment]]
=== environment


NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-filter-environment`.


This filter stores environment variables as subfields in the `@metadata` field.
You can then use these values in other parts of the pipeline.

Adding environment variables is as easy as:

[source,ruby]
-----
   filter {
     environment {
       add_metadata_from_env { "field_name" => "ENV_VAR_NAME" }
     }
   }
-----

Accessing stored environment variables is now done through the `@metadata` field:

   ["@metadata"]["field_name"]

This would reference field `field_name`, which in the above example references
the `ENV_VAR_NAME` environment variable.

IMPORTANT: Previous versions of this plugin put the environment variables as
fields at the root level of the event.  Current versions make use of the
`@metadata` field, as outlined.  You have to change `add_field_from_env` in
the older versions to `add_metadata_from_env` in the newer version.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
environment {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-environment-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-environment-add_metadata_from_env>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-environment-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-environment-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-environment-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-environment-remove_tag>> |<<array,array>>|No|`[]`
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-environment-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
-----
    filter {
      environment {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple fields at once:
    filter {
      environment {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-environment-add_metadata_from_env]]
===== `add_metadata_from_env` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Specify a hash of field names and the environment variable name with the
value you want imported into Logstash. For example:

[source,ruby]
-----
   add_metadata_from_env { "field_name" => "ENV_VAR_NAME" }
-----

or

[source,ruby]
-----
   add_metadata_from_env {
     "field1" => "ENV1"
     "field2" => "ENV2"
     # "field_n" => "ENV_n"
   }
-----

[[plugins-filters-environment-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      environment {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple tags at once:
    filter {
      environment {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-environment-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-environment-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}

Example:
[source,ruby]
-----
    filter {
      environment {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple fields at once:
    filter {
      environment {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-environment-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      environment {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple tags at once:
    filter {
      environment {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.


