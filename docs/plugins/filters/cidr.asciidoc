[[plugins-filters-cidr]]
=== cidr

* Version: 3.0.0
* Released on: 2016-08-24
* https://github.com/logstash-plugins/logstash-filter-cidr/blob/master/CHANGELOG.md#300[Changelog]



NOTE: This plugin does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-filter-cidr`.


The CIDR filter is for checking IP addresses in events against a list of
network blocks that might contain it. Multiple addresses can be checked
against multiple networks, any match succeeds. Upon success additional tags
and/or fields can be added to the event.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
cidr {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-cidr-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-cidr-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-cidr-address>> |<<array,array>>|No|`[]`
| <<plugins-filters-cidr-enable_metric>> |<<boolean,boolean>>|No|`true`
| <<plugins-filters-cidr-id>> |<<string,string>>|No|
| <<plugins-filters-cidr-network>> |<<array,array>>|No|`[]`
| <<plugins-filters-cidr-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-cidr-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-cidr-remove_tag>> |<<array,array>>|No|`[]`
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-cidr-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
-----
    filter {
      cidr {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple fields at once:
    filter {
      cidr {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-cidr-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      cidr {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple tags at once:
    filter {
      cidr {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-cidr-address]]
===== `address` 

  * Value type is <<array,array>>
  * Default value is `[]`

The IP address(es) to check with. Example:
[source,ruby]
-----
    filter {
      cidr {
        add_tag => [ "testnet" ]
        address => [ "%{src_ip}", "%{dst_ip}" ]
        network => [ "192.0.2.0/24" ]
      }
    }
-----

[[plugins-filters-cidr-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-filters-cidr-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin instance, this `ID` is used for tracking
information for a specific configuration of the plugin.

```
output {
 stdout {
   id => "ABC"
 }
}
```

If you don't explicitely set this variable Logstash will generate a unique name.

[[plugins-filters-cidr-network]]
===== `network` 

  * Value type is <<array,array>>
  * Default value is `[]`

The IP network(s) to check against. Example:
[source,ruby]
    filter {
      cidr {
        add_tag => [ "linklocal" ]
        address => [ "%{clientip}" ]
        network => [ "169.254.0.0/16", "fe80::/64" ]
      }
    }

[[plugins-filters-cidr-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-cidr-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}

Example:
[source,ruby]
-----
    filter {
      cidr {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple fields at once:
    filter {
      cidr {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-cidr-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      cidr {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple tags at once:
    filter {
      cidr {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.


