[[plugins-filters-alter]]
=== alter


NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/plugin install logstash-filter-alter`.


The alter filter allows you to do general alterations to fields 
that are not included in the normal mutate filter. 


NOTE: The functionality provided by this plugin is likely to
be merged into the 'mutate' filter in future versions.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
alter {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-alter-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-alter-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-alter-coalesce>> |<<array,array>>|No|
| <<plugins-filters-alter-condrewrite>> |<<array,array>>|No|
| <<plugins-filters-alter-condrewriteother>> |<<array,array>>|No|
| <<plugins-filters-alter-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-alter-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-alter-remove_tag>> |<<array,array>>|No|`[]`
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-alter-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
-----
    filter {
      alter {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple fields at once:
    filter {
      alter {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-alter-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      alter {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple tags at once:
    filter {
      alter {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-alter-coalesce]]
===== `coalesce` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Sets the value of field_name to the first nonnull expression among its arguments.

Example:
[source,ruby]
-----
    filter {
      alter {
        coalesce => [
             "field_name", "value1", "value2", "value3", ...
        ]
      }
    }
-----

[[plugins-filters-alter-condrewrite]]
===== `condrewrite` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Change the content of the field to the specified value
if the actual content is equal to the expected one.

Example:
[source,ruby]
-----
    filter {
      alter {
        condrewrite => [ 
             "field_name", "expected_value", "new_value",
             "field_name2", "expected_value2, "new_value2",
             ....
           ]
      }
    }
-----

[[plugins-filters-alter-condrewriteother]]
===== `condrewriteother` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Change the content of the field to the specified value
if the content of another field is equal to the expected one.

Example:
[source,ruby]
-----
    filter {
      alter {
        condrewriteother => [ 
             "field_name", "expected_value", "field_name_to_change", "value",
             "field_name2", "expected_value2, "field_name_to_change2", "value2",
             ....
        ]
      }
    }
-----

[[plugins-filters-alter-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-alter-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:

[source,ruby]
-----
    filter {
      alter {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple fields at once:
    filter {
      alter {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-alter-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      alter {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple tags at once:
    filter {
      alter {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.


