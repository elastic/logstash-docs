[[plugins-filters-kv]]
=== kv



This filter helps automatically parse messages (or specific event fields)
which are of the `foo=bar` variety.

For example, if you have a log message which contains `ip=1.2.3.4
error=REFUSED`, you can parse those automatically by configuring:
[source,ruby]
    filter {
      kv { }
    }

The above will result in a message of `ip=1.2.3.4 error=REFUSED` having
the fields:

* `ip: 1.2.3.4`
* `error: REFUSED`

This is great for postfix, iptables, and other types of logs that
tend towards `key=value` syntax.

You can configure any arbitrary strings to split your data on,
in case your data is not structured using `=` signs and whitespace.
For example, this filter can also be used to parse query parameters like
`foo=bar&baz=fizz` by setting the `field_split` parameter to `&`.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
kv {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-kv-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-kv-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-kv-allow_duplicate_values>> |<<boolean,boolean>>|No|`true`
| <<plugins-filters-kv-default_keys>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-kv-exclude_keys>> |<<array,array>>|No|`[]`
| <<plugins-filters-kv-field_split>> |<<string,string>>|No|`" "`
| <<plugins-filters-kv-include_brackets>> |<<boolean,boolean>>|No|`true`
| <<plugins-filters-kv-include_keys>> |<<array,array>>|No|`[]`
| <<plugins-filters-kv-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-kv-prefix>> |<<string,string>>|No|`""`
| <<plugins-filters-kv-recursive>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-kv-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-kv-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-kv-source>> |<<string,string>>|No|`"message"`
| <<plugins-filters-kv-target>> |<<string,string>>|No|
| <<plugins-filters-kv-trim>> |<<string,string>>|No|
| <<plugins-filters-kv-trimkey>> |<<string,string>>|No|
| <<plugins-filters-kv-value_split>> |<<string,string>>|No|`"="`
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-kv-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      kv {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      kv {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-kv-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      kv {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      kv {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-kv-allow_duplicate_values]]
===== `allow_duplicate_values` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

A bool option for removing duplicate key/value pairs. When set to false, only
one unique key/value pair will be preserved.

For example, consider a source like `from=me from=me`. `[from]` will map to
an Array with two elements: `["me", "me"]`. to only keep unique key/value pairs,
you could use this configuration:
[source,ruby]
    filter {
      kv {
        allow_duplicate_values => false
      }
    }

[[plugins-filters-kv-default_keys]]
===== `default_keys` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

A hash specifying the default keys and their values which should be added to the event
in case these keys do not exist in the source field being parsed.
[source,ruby]
    filter {
      kv {
        default_keys => [ "from", "logstash@example.com",
                         "to", "default@dev.null" ]
      }
    }

[[plugins-filters-kv-exclude_keys]]
===== `exclude_keys` 

  * Value type is <<array,array>>
  * Default value is `[]`

An array specifying the parsed keys which should not be added to the event.
By default no keys will be excluded.

For example, consider a source like `Hey, from=<abc>, to=def foo=bar`.
To exclude `from` and `to`, but retain the `foo` key, you could use this configuration:
[source,ruby]
    filter {
      kv {
        exclude_keys => [ "from", "to" ]
      }
    }

[[plugins-filters-kv-field_split]]
===== `field_split` 

  * Value type is <<string,string>>
  * Default value is `" "`

A string of characters to use as delimiters for parsing out key-value pairs.

These characters form a regex character class and thus you must escape special regex
characters like `[` or `]` using `\`.

*Example with URL Query Strings*

For example, to split out the args from a url query string such as
`?pin=12345~0&d=123&e=foo@bar.com&oq=bobo&ss=12345`:
[source,ruby]
    filter {
      kv {
        field_split => "&?"
      }
    }

The above splits on both `&` and `?` characters, giving you the following
fields:

* `pin: 12345~0`
* `d: 123`
* `e: foo@bar.com`
* `oq: bobo`
* `ss: 12345`

[[plugins-filters-kv-include_brackets]]
===== `include_brackets` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

A boolean specifying whether to include brackets as value `wrappers`
(the default is true)
[source,ruby]
    filter {
      kv {
        include_brackets => true
      }
    }

For example, the result of this line:
`bracketsone=(hello world) bracketstwo=[hello world]`

will be:
* bracketsone: hello world
* bracketstwo: hello world

instead of:
* bracketsone: (hello
* bracketstwo: [hello

[[plugins-filters-kv-include_keys]]
===== `include_keys` 

  * Value type is <<array,array>>
  * Default value is `[]`

An array specifying the parsed keys which should be added to the event.
By default all keys will be added.

For example, consider a source like `Hey, from=<abc>, to=def foo=bar`.
To include `from` and `to`, but exclude the `foo` key, you could use this configuration:
[source,ruby]
    filter {
      kv {
        include_keys => [ "from", "to" ]
      }
    }

[[plugins-filters-kv-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-kv-prefix]]
===== `prefix` 

  * Value type is <<string,string>>
  * Default value is `""`

A string to prepend to all of the extracted keys.

For example, to prepend arg_ to all keys:
[source,ruby]
    filter { kv { prefix => "arg_" } }

[[plugins-filters-kv-recursive]]
===== `recursive` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

A boolean specifying whether to drill down into values
and recursively get more key-value pairs from it.
The extra key-value pairs will be stored as subkeys of the root key.

Default is not to recursive values.
[source,ruby]
    filter {
      kv {
        recursive => "true"
      }
    }


[[plugins-filters-kv-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      kv {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      kv {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-kv-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      kv {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      kv {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-kv-source]]
===== `source` 

  * Value type is <<string,string>>
  * Default value is `"message"`

The field to perform `key=value` searching on

For example, to process the `not_the_message` field:
[source,ruby]
    filter { kv { source => "not_the_message" } }

[[plugins-filters-kv-target]]
===== `target` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

The name of the container to put all of the key-value pairs into.

If this setting is omitted, fields will be written to the root of the
event, as individual fields.

For example, to place all keys into the event field kv:
[source,ruby]
    filter { kv { target => "kv" } }

[[plugins-filters-kv-trim]]
===== `trim` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

A string of characters to trim from the value. This is useful if your
values are wrapped in brackets or are terminated with commas (like postfix
logs).

These characters form a regex character class and thus you must escape special regex
characters like `[` or `]` using `\`.

For example, to strip `<`, `>`, `[`, `]` and `,` characters from values:
[source,ruby]
    filter {
      kv {
        trim => "<>\[\],"
      }
    }

[[plugins-filters-kv-trimkey]]
===== `trimkey` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

A string of characters to trim from the key. This is useful if your
keys are wrapped in brackets or start with space.

These characters form a regex character class and thus you must escape special regex
characters like `[` or `]` using `\`.

For example, to strip `<` `>` `[` `]` and `,` characters from keys:
[source,ruby]
    filter {
      kv {
        trimkey => "<>\[\],"
      }
    }

[[plugins-filters-kv-value_split]]
===== `value_split` 

  * Value type is <<string,string>>
  * Default value is `"="`

A string of characters to use as delimiters for identifying key-value relations.

These characters form a regex character class and thus you must escape special regex
characters like `[` or `]` using `\`.

For example, to identify key-values such as
`key1:value1 key2:value2`:
[source,ruby]
    filter { kv { value_split => ":" } }


