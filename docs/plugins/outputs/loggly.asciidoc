:plugin: loggly
:type: output
:default_plugin: 0
:default_codec: plain

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: v6.0.0
:release_date: 2018-07-03
:changelog_url: https://github.com/logstash-plugins/logstash-output-loggly/blob/v6.0.0/CHANGELOG.md
:include_path: ../include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

=== Loggly output plugin

include::{include_path}/plugin_header.asciidoc[]

==== Description

Got a loggly account? Use logstash to ship logs to Loggly!

This is most useful so you can use logstash to parse and structure
your logs and ship structured, json events to your account at Loggly.

To use this, you'll need to use a Loggly input with type 'http'
and 'json logging' enabled.

[id="plugins-{type}s-{plugin}-options"]
==== Loggly Output Configuration Options

This plugin supports the following configuration options plus the <<plugins-{type}s-{plugin}-common-options>> described later.

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-can_retry>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-convert_timestamp>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-host>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-key>> |<<string,string>>|Yes
| <<plugins-{type}s-{plugin}-max_event_size>> |<<bytes,bytes>>|Yes
| <<plugins-{type}s-{plugin}-max_payload_size>> |<<bytes,bytes>>|Yes
| <<plugins-{type}s-{plugin}-proto>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-proxy_host>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-proxy_password>> |<<password,password>>|No
| <<plugins-{type}s-{plugin}-proxy_port>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-proxy_user>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-retry_count>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-tag>> |<<string,string>>|No
|=======================================================================

Also see <<plugins-{type}s-{plugin}-common-options>> for a list of options supported by all
output plugins.

&nbsp;

[id="plugins-{type}s-{plugin}-can_retry"]
===== `can_retry`

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Can Retry.
Setting this value true helps user to send multiple retry attempts if the first request fails

[id="plugins-{type}s-{plugin}-convert_timestamp"]
===== `convert_timestamp`

  * Value type is <<boolean,boolean>>
  * Default value is `true`

The plugin renames Logstash's '@timestamp' field to 'timestamp' before sending,
so that Loggly recognizes it automatically.

This will do nothing if your event doesn't have a '@timestamp' field or if
your event already has a 'timestamp' field.

Note that the actual Logstash event is not modified by the output. This modification
only happens on a copy of the event, prior to sending.

[id="plugins-{type}s-{plugin}-host"]
===== `host`

  * Value type is <<string,string>>
  * Default value is `"logs-01.loggly.com"`

The hostname to send logs to. This should target the loggly http input
server which is usually "logs-01.loggly.com" (Gen2 account).
See the https://www.loggly.com/docs/http-endpoint/[Loggly HTTP endpoint documentation].


[id="plugins-{type}s-{plugin}-key"]
===== `key`

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

The loggly http customer token to use for sending.
You can find yours in "Source Setup", under "Customer Tokens".

You can use `%{foo}` field lookups here if you need to pull the api key from
the event. This is mainly aimed at multitenant hosting providers who want
to offer shipping a customer's logs to that customer's loggly account.

[id="plugins-{type}s-{plugin}-max_event_size"]
===== `max_event_size`

  * This is a required setting.
  * Value type is <<bytes,bytes>>
  * Default value is 1 Mib

The Loggly API supports event size up to 1 Mib.

You should only need to change this setting if the
API limits have changed and you need to override the plugin's behaviour.

See the https://www.loggly.com/docs/http-bulk-endpoint/[Loggly bulk API documentation]

[id="plugins-{type}s-{plugin}-max_payload_size"]
===== `max_payload_size`

  * This is a required setting.
  * Value type is <<bytes,bytes>>
  * Default value is 5 Mib

The Loggly API supports API call payloads up to 5 Mib.

You should only need to change this setting if the
API limits have changed and you need to override the plugin's behaviour.

See the https://www.loggly.com/docs/http-bulk-endpoint/[Loggly bulk API documentation]

[id="plugins-{type}s-{plugin}-proto"]
===== `proto`

  * Value type is <<string,string>>
  * Default value is `"http"`

Should the log action be sent over https instead of plain http

[id="plugins-{type}s-{plugin}-proxy_host"]
===== `proxy_host`

  * Value type is <<string,string>>
  * There is no default value for this setting.

Proxy Host

[id="plugins-{type}s-{plugin}-proxy_password"]
===== `proxy_password`

  * Value type is <<password,password>>
  * Default value is `""`

Proxy Password

[id="plugins-{type}s-{plugin}-proxy_port"]
===== `proxy_port`

  * Value type is <<number,number>>
  * There is no default value for this setting.

Proxy Port

[id="plugins-{type}s-{plugin}-proxy_user"]
===== `proxy_user`

  * Value type is <<string,string>>
  * There is no default value for this setting.

Proxy Username

[id="plugins-{type}s-{plugin}-retry_count"]
===== `retry_count`

  * Value type is <<number,number>>
  * Default value is `5`

Retry count.
It may be possible that the request may timeout due to slow Internet connection
if such condition appears, retry_count helps in retrying request for multiple times
It will try to submit request until retry_count and then halt

[id="plugins-{type}s-{plugin}-tag"]
===== `tag`

  * Value type is <<string,string>>

Loggly Tags help you to find your logs in the Loggly dashboard easily.
You can search for a tag in Loggly, using `"tag:your_tag"`.

If you need to specify multiple tags here on your events,
specify them as outlined in https://www.loggly.com/docs/tags/[the tag documentation].
E.g. `"tag" => "foo,bar,myApp"`.

You can also use `"tag" => "%{somefield},%{another_field}"` to take your tag values
from `somefield` and `another_field` on your event. If the field doesn't exist,
no tag will be created.
Helpful for leveraging https://www.loggly.com/docs/source-groups/[Loggly source groups].



[id="plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]

:default_codec!:
