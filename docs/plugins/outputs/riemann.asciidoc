:plugin: riemann
:type: output
:default_plugin: 0

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: v3.0.3
:release_date: 2017-11-13
:changelog_url: https://github.com/logstash-plugins/logstash-output-riemann/blob/v3.0.3/CHANGELOG.md
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

=== Riemann output plugin

include::{include_path}/plugin_header.asciidoc[]

==== Description

Riemann is a network event stream processing system.

While Riemann is very similar conceptually to Logstash, it has
much more in terms of being a monitoring system replacement.

Riemann is used in Logstash much like statsd or other metric-related
outputs

You can learn about Riemann here:

* http://riemann.io/
You can see the author talk about it here:
* http://vimeo.com/38377415


[id="plugins-{type}s-{plugin}-options"]
==== Riemann Output Configuration Options

This plugin supports the following configuration options plus the <<plugins-{type}s-{plugin}-common-options>> described later.

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-debug>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-host>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-map_fields>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-port>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-protocol>> |<<string,string>>, one of `["tcp", "udp"]`|No
| <<plugins-{type}s-{plugin}-riemann_event>> |<<hash,hash>>|No
| <<plugins-{type}s-{plugin}-sender>> |<<string,string>>|No
|=======================================================================

Also see <<plugins-{type}s-{plugin}-common-options>> for a list of options supported by all
output plugins.

&nbsp;

[id="plugins-{type}s-{plugin}-debug"]
===== `debug` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`


Enable debugging output?

[id="plugins-{type}s-{plugin}-host"]
===== `host` 

  * Value type is <<string,string>>
  * Default value is `"localhost"`

The address of the Riemann server.

[id="plugins-{type}s-{plugin}-map_fields"]
===== `map_fields` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

If set to true automatically map all logstash defined fields to riemann event fields.
All nested logstash fields will be mapped to riemann fields containing all parent keys
separated by dots and the deepest value.

As an example, the logstash event:
[source,ruby]
   {
     "@timestamp":"2013-12-10T14:36:26.151+0000",
     "@version": 1,
     "message":"log message",
     "host": "host.domain.com",
     "nested_field": {
                       "key": "value"
                     }
   }
Is mapped to this riemann event:
[source,ruby]
  {
    :time 1386686186,
    :host host.domain.com,
    :message log message,
    :nested_field.key value
  }

It can be used in conjunction with or independent of the riemann_event option.
When used with the riemann_event any duplicate keys receive their value from
riemann_event instead of the logstash event itself.

[id="plugins-{type}s-{plugin}-port"]
===== `port` 

  * Value type is <<number,number>>
  * Default value is `5555`

The port to connect to on your Riemann server.

[id="plugins-{type}s-{plugin}-protocol"]
===== `protocol` 

  * Value can be any of: `tcp`, `udp`
  * Default value is `"tcp"`

The protocol to use
UDP is non-blocking
TCP is blocking

Logstash's default output behaviour
is to never lose events
As such, we use tcp as default here

[id="plugins-{type}s-{plugin}-riemann_event"]
===== `riemann_event` 

  * Value type is <<hash,hash>>
  * There is no default value for this setting.

A Hash to set Riemann event fields
(http://riemann.io/concepts.html).

The following event fields are supported:
`description`, `state`, `metric`, `ttl`, `service`

Tags found on the Logstash event will automatically be added to the
Riemann event.

Any other field set here will be passed to Riemann as an event attribute.

Example:
[source,ruby]
    riemann {
        riemann_event => {
            "metric"  => "%{metric}"
            "service" => "%{service}"
        }
    }

`metric` and `ttl` values will be coerced to a floating point value.
Values which cannot be coerced will zero (0.0).

`description`, by default, will be set to the event message
but can be overridden here.

[id="plugins-{type}s-{plugin}-sender"]
===== `sender` 

  * Value type is <<string,string>>
  * Default value is `"%{host}"`

The name of the sender.
This sets the `host` value
in the Riemann event



[id="plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]